/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { DeveloperDetails, ClientDetails } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface RegisterDeveloperProps {
  account: Account | AccountInterface;
  developerDetails: DeveloperDetails;
}

export interface GetDeveloperProps {
  account: Account | AccountInterface;
  developerId: number;
}

export interface ChangeGithubUsernameProps {
  account: Account | AccountInterface;
  developerId: number;
  githubUsername: number;
}

export interface ChangeTelegramHandleProps {
  account: Account | AccountInterface;
  developerId: number;
  telegramHandle: number;
}

export interface ChangeXHandleProps {
  account: Account | AccountInterface;
  developerId: number;
  xHandle: number;
}

export interface PlayProps {
  account: Account | AccountInterface;
  clientId: number;
}

export interface RatingProps {
  account: Account | AccountInterface;
  clientId: number;
  rating: number;
}

export interface RegisterClientProps {
  account: Account | AccountInterface;
  clientDetails: ClientDetails;
}

export interface ChangeUrlProps {
  account: Account | AccountInterface;
  clientId: number;
  url: number;
}

export async function setupWorld(provider: DojoProvider) {
  function clientDeveloper() {
    const contract_name = "client_developer_mock";

    const registerDeveloper = async ({
      account,
      developerDetails,
    }: RegisterDeveloperProps) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "register_developer",
          [
            developerDetails.githubUsername,
            developerDetails.telegramHandle,
            developerDetails.xHandle,
          ]
        );
      } catch (error) {
        console.error("Error executing register developer:", error);
        throw error;
      }
    };

    const getDeveloper = async ({
      account,
      developerId,
    }: GetDeveloperProps) => {
      try {
        return await provider.execute(account, contract_name, "get_developer", [
          developerId,
        ]);
      } catch (error) {
        console.error("Error executing get developer:", error);
        throw error;
      }
    };

    const changeGithubUsername = async ({
      account,
      developerId,
      githubUsername,
    }: ChangeGithubUsernameProps) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "change_github_username",
          [developerId, githubUsername]
        );
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };

    const changeTelegramHandle = async ({
      account,
      developerId,
      telegramHandle,
    }: ChangeTelegramHandleProps) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "change_github_username",
          [developerId, telegramHandle]
        );
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };

    const changeXHandle = async ({
      account,
      developerId,
      xHandle,
    }: ChangeXHandleProps) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "change_github_username",
          [developerId, xHandle]
        );
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };
    return {
      registerDeveloper,
      getDeveloper,
      changeGithubUsername,
      changeTelegramHandle,
      changeXHandle,
    };
  }

  function clientPlay() {
    const contract_name = "client_play_mock";

    const play = async ({ account, clientId }: PlayProps) => {
      try {
        return await provider.execute(account, contract_name, "play", [
          clientId,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      play,
    };
  }

  function clientRating() {
    const contract_name = "client_rating_mock";

    const rate = async ({ account, clientId, rating }: RatingProps) => {
      try {
        return await provider.execute(account, contract_name, "rate", [
          clientId,
          rating,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      rate,
    };
  }

  function clientRegistration() {
    const contract_name = "client_registration_mock";

    const registerClient = async ({
      account,
      clientDetails,
    }: RegisterClientProps) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "register_client",
          [
            clientDetails.developerId,
            clientDetails.gameId,
            clientDetails.name,
            clientDetails.url,
          ]
        );
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    const changeUrl = async ({ account, clientId, url }: ChangeUrlProps) => {
      try {
        return await provider.execute(account, contract_name, "change_url", [
          clientId,
          url,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      registerClient,
      changeUrl,
    };
  }

  return {
    clientDeveloper: clientDeveloper(),
    clientPlay: clientPlay(),
    clientRating: clientRating(),
    clientRegistration: clientRegistration(),
  };
}
