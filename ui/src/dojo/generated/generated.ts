/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, uint256 } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { CreatorDetails, ClientDetails } from "../../utils";
import { setupNetwork } from "./setupNetwork";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface RegisterCreatorProps {
  account: Account | AccountInterface;
  creatorDetails: CreatorDetails;
}

export interface GetcreatorProps {
  account: Account | AccountInterface;
  creatorId: number;
}

export interface ChangeGithubUsernameProps {
  account: Account | AccountInterface;
  creatorId: number;
  githubUsername: number;
}

export interface ChangeTelegramHandleProps {
  account: Account | AccountInterface;
  creatorId: number;
  telegramHandle: number;
}

export interface ChangeXHandleProps {
  account: Account | AccountInterface;
  creatorId: number;
  xHandle: number;
}

export interface PlayProps {
  account: Account | AccountInterface;
  clientId: bigint;
}

export interface RatingProps {
  account: Account | AccountInterface;
  clientId: bigint;
  rating: bigint;
}

export interface RegisterClientProps {
  account: Account | AccountInterface;
  clientDetails: ClientDetails;
}

export interface ChangeUrlProps {
  account: Account | AccountInterface;
  clientId: number;
  url: number;
}

export async function setupWorld(provider: DojoProvider) {
  // Initialize the network configuration.
  const { execute } = await setupNetwork(provider);
  const contract_name = "ClientManager";

  function clientCreator() {
    const registerCreator = async ({
      account,
      creatorDetails,
    }: RegisterCreatorProps) => {
      try {
        return await execute(account, contract_name, "register_creator", [
          creatorDetails.githubUsername,
          creatorDetails.telegramHandle,
          creatorDetails.xHandle,
        ]);
      } catch (error) {
        console.error("Error executing register creator:", error);
        throw error;
      }
    };

    const changeGithubUsername = async ({
      account,
      creatorId,
      githubUsername,
    }: ChangeGithubUsernameProps) => {
      try {
        return await execute(account, contract_name, "change_github_username", [
          creatorId,
          githubUsername,
        ]);
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };

    const changeTelegramHandle = async ({
      account,
      creatorId,
      telegramHandle,
    }: ChangeTelegramHandleProps) => {
      try {
        return await execute(account, contract_name, "change_github_username", [
          creatorId,
          telegramHandle,
        ]);
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };

    const changeXHandle = async ({
      account,
      creatorId,
      xHandle,
    }: ChangeXHandleProps) => {
      try {
        return await execute(account, contract_name, "change_github_username", [
          creatorId,
          xHandle,
        ]);
      } catch (error) {
        console.error("Error executing change github username:", error);
        throw error;
      }
    };
    return {
      registerCreator,
      changeGithubUsername,
      changeTelegramHandle,
      changeXHandle,
    };
  }

  function clientPlay() {
    const play = async ({ account, clientId }: PlayProps) => {
      try {
        return await execute(account, contract_name, "play", [
          uint256.bnToUint256(clientId).low,
          uint256.bnToUint256(clientId).high,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      play,
    };
  }

  function clientRating() {
    const rate = async ({ account, clientId, rating }: RatingProps) => {
      try {
        return await execute(account, contract_name, "rate", [
          uint256.bnToUint256(clientId).low,
          uint256.bnToUint256(clientId).high,
          rating,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      rate,
    };
  }

  function clientRegistration() {
    const registerClient = async ({
      account,
      clientDetails,
    }: RegisterClientProps) => {
      try {
        return await execute(account, contract_name, "register_client", [
          uint256.bnToUint256(clientDetails.creatorId).low,
          uint256.bnToUint256(clientDetails.creatorId).high,
          uint256.bnToUint256(clientDetails.gameId).low,
          uint256.bnToUint256(clientDetails.gameId).high,
          clientDetails.name,
          clientDetails.url,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    const changeUrl = async ({ account, clientId, url }: ChangeUrlProps) => {
      try {
        return await execute(account, contract_name, "change_url", [
          clientId,
          url,
        ]);
      } catch (error) {
        console.error("Error executing play:", error);
        throw error;
      }
    };

    return {
      registerClient,
      changeUrl,
    };
  }

  return {
    clientCreator: clientCreator(),
    clientPlay: clientPlay(),
    clientRating: clientRating(),
    clientRegistration: clientRegistration(),
  };
}
