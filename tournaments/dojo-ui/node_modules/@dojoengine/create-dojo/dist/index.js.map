{"version":3,"sources":["../src/commands/start.ts","../src/index.ts","../src/utils/get-package-info.ts"],"sourcesContent":["import { Command } from \"commander\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport spawn from \"cross-spawn\";\nimport https from \"https\";\nimport { input, select } from \"@inquirer/prompts\";\n\nconst templates = [\n    {\n        value: \"example-vite-react-sdk\",\n        description: \"React app using Dojo SDK\",\n    },\n    {\n        value: \"example-vite-kitchen-sink\",\n        description: \"Vite app with a variety of Dojo features\",\n    },\n    {\n        value: \"example-vanillajs-phaser-recs\",\n        description: \"Vanilla JS/Phaser app using Dojo RECS\",\n    },\n    {\n        value: \"example-vite-react-phaser-recs\",\n        description: \"React/Phaser app using Dojo RECS\",\n    },\n    {\n        value: \"example-vite-react-pwa-recs\",\n        description: \"React Progressive Web App using Dojo RECS\",\n    },\n    {\n        value: \"example-vite-react-threejs-recs\",\n        description: \"React Three.js app using Dojo RECS\",\n    },\n    {\n        value: \"example-vite-react-sdk\",\n        description: \"Basic react app using the sdk\",\n    },\n    {\n        value: \"example-vite-svelte-recs\",\n        description: \"Basic svelte app using Dojo RECS\",\n    },\n    { value: \"example-vue-app-recs\", description: \"Basic vite app using RECS\" },\n];\n\nasync function init(projectName: string, cwd: string, template: string) {\n    const projectPath = path.join(cwd, projectName);\n    const clientPath = path.join(projectPath, \"client\");\n    const dojoStarterPath = path.join(projectPath, \"dojo-starter\");\n\n    // Create project directories\n    await fs.mkdir(projectPath, { recursive: true });\n    await fs.mkdir(clientPath, { recursive: true });\n    await fs.mkdir(dojoStarterPath, { recursive: true });\n\n    // Clone template into client directory\n    console.log(`Downloading ${template} into client directory...`);\n    const cloneResult = spawn.sync(\n        \"npx\",\n        [\"degit\", `dojoengine/dojo.js/examples/${template}`, clientPath],\n        { stdio: \"inherit\" }\n    );\n\n    if (cloneResult.status !== 0) {\n        throw new Error(`Failed to clone template: ${template}`);\n    }\n\n    // Rewrite package.json in client directory\n    await rewritePackageJson(projectName, clientPath);\n\n    console.log(`Cloning dojo-starter repository...`);\n    const gitCloneResult = spawn.sync(\n        \"git\",\n        [\n            \"clone\",\n            \"https://github.com/dojoengine/dojo-starter.git\",\n            dojoStarterPath,\n        ],\n        { stdio: \"inherit\" }\n    );\n\n    if (gitCloneResult.status !== 0) {\n        throw new Error(`Failed to clone dojo-starter repository.`);\n    }\n\n    // Clone dojo-starter\n    console.log(`Downloading dojo-starter...`);\n    spawn.sync(\"npx\", [\"degit\", `dojoengine/dojo-starter`, dojoStarterPath], {\n        stdio: \"inherit\",\n    });\n\n    console.log(`Project initialized at ${projectPath}`);\n    console.log(\"Congrats! Your new project has been set up successfully.\\n\");\n    console.log(\n        `Navigate into your project directory with:\\n  cd ${projectName}\\n`\n    );\n    console.log(\"You can then build the starter and run the client.\\n\");\n    console.log(\"For detailed instructions, follow the README here:\\n\");\n    console.log(\"https://book.dojoengine.org/\");\n}\n\nasync function rewritePackageJson(projectName: string, clientPath: string) {\n    const packageJsonPath = path.join(clientPath, \"package.json\");\n    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, \"utf-8\"));\n    const latestVersion = await getLatestVersion();\n\n    packageJson.name = projectName;\n\n    for (let dep of Object.keys(packageJson.dependencies)) {\n        if (\n            dep.startsWith(\"@dojoengine\") &&\n            packageJson.dependencies[dep].startsWith(\"workspace:\")\n        ) {\n            packageJson.dependencies[dep] = latestVersion;\n        }\n    }\n\n    await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));\n}\n\nasync function getLatestVersion(): Promise<string> {\n    return new Promise((resolve, reject) => {\n        https\n            .get(\n                \"https://registry.npmjs.org/-/package/@dojoengine/core/dist-tags\",\n                (res) => {\n                    if (res.statusCode === 200) {\n                        let body = \"\";\n                        res.on(\"data\", (data) => (body += data));\n                        res.on(\"end\", () => {\n                            resolve(JSON.parse(body).latest);\n                        });\n                    } else {\n                        reject(\n                            new Error(\n                                `Failed to fetch latest version: ${res.statusCode}`\n                            )\n                        );\n                    }\n                }\n            )\n            .on(\"error\", (error) => {\n                reject(error);\n            });\n    });\n}\n\nexport const start = new Command()\n    .name(\"start\")\n    .description(\"initialize a new project with a selected template\")\n    .option(\"-c, --cwd <cwd>\", \"the working directory\", process.cwd())\n    .option(\"-t, --template <template>\", \"specify the template to use\")\n    .action(async (options) => {\n        try {\n            const cwd = path.resolve(options.cwd);\n            let template: string;\n\n            if (options.template) {\n                const selectedTemplate = templates.find(\n                    (tpl) => tpl.value === options.template\n                );\n                if (!selectedTemplate) {\n                    console.error(\n                        `Template \"${options.template}\" not found. Available templates are: ${templates\n                            .map((tpl) => tpl.value)\n                            .join(\", \")}`\n                    );\n                    process.exit(1);\n                }\n                template = selectedTemplate.value;\n            } else {\n                template = await select({\n                    message: \"Select a template\",\n                    choices: templates,\n                });\n            }\n\n            const projectName = await input({\n                message: \"Project name \",\n                validate: (input: string) => {\n                    if (/^([A-Za-z\\-\\_\\d])+$/.test(input)) return true;\n                    else\n                        return \"Project name may only include letters, numbers, underscores and hashes.\";\n                },\n                default: template,\n            });\n\n            await init(projectName, cwd, template);\n        } catch (error) {\n            console.error(\"An error occurred:\", error);\n            process.exit(1);\n        }\n    });\n","#!/usr/bin/env node\nimport { start } from \"./commands/start\";\n\nimport { Command } from \"commander\";\n\nimport { getPackageInfo } from \"./utils/get-package-info\";\n\nprocess.on(\"SIGINT\", () => process.exit(0));\nprocess.on(\"SIGTERM\", () => process.exit(0));\n\nasync function main() {\n    const packageInfo = await getPackageInfo();\n\n    const program = new Command()\n        .name(\"@dojoengine\")\n        .description(\"install a dojo client\")\n        .version(\n            packageInfo.version || \"1.0.0\",\n            \"-v, --version\",\n            \"display the version number\"\n        );\n\n    program.addCommand(start);\n\n    program.parse();\n}\n\nmain();\n","import path from \"path\";\nimport fs from \"fs-extra\";\nimport { type PackageJson } from \"type-fest\";\n\nexport function getPackageInfo() {\n    const packageJsonPath = path.join(\"package.json\");\n\n    return fs.readJSONSync(packageJsonPath) as PackageJson;\n}\n"],"mappings":"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","names":["input","Command","path","fs","Command"]}